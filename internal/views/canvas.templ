package views

templ CanvasPage(roomID string) {
	@layout("Canvas Room: " + roomID, "m-0 p-0 overflow-hidden w-full h-screen bg-gray-900 font-sans text-gray-100") {

		<div class="absolute top-2.5 left-2.5 bg-black/70 py-2 px-3 rounded-md text-sm flex items-center gap-2 z-10">
			<a href="/" class="text-blue-400 no-underline font-medium hover:text-blue-300">&larr; Lobby</a>
			<span class="text-gray-400">|</span>
			<span>Room:
				<span class="font-semibold text-white">{ roomID }</span>
			</span>
		</div>

		<div class="absolute top-44 right-5 z-10 flex flex-col gap-2">
			<div tabindex="0" class="relative group w-14 h-14 bg-white rounded-full shadow-lg p-2 flex items-center justify-center transition-all duration-200 ease-in-out">
				<input type="radio" name="tool" id="tool-pan" value="pan" class="peer/pan sr-only">
				<svg class="w-8 h-8 fill-black transition-transform group-hover:rotate-45" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
					<path d="M19.4 12.9c.1-1.2-.3-2.5-1.1-3.4l-1.4-1.4c-.4-.4-.8-.7-1.3-.9-1-.4-2.1-.5-3.2-.2l-2.1.5c-1.2.3-2.3 1-3.1 2l-1.4 1.4c-.8.9-1.2 2.1-1.1 3.4.1 1.2.3 2.5 1.1 3.4l1.4 1.4c.4.4.8.7 1.3.9 1 .4 2.1.5 3.2.2l2.1-.5c1.2-.3 2.3-1 3.1-2l1.4-1.4c.8-.9 1.2-2.1 1.1-3.4zm-2.2 2.2l-1.4 1.4c-.6.6-1.4 1-2.2 1.2l-2.1.5c-.8.2-1.6.1-2.4-.2-.5-.2-.9-.4-1.3-.8l-1.4-1.4c-.6-.6-1-1.4-1.2-2.2l-.2-2.1c-.2-.8-.1-1.6.2-2.4.2-.5.4-.9.8-1.3l1.4-1.4c.6-.6 1.4-1 2.2-1.2l2.1-.5c.8-.2 1.6-.1 2.4.2.5.2.9.4 1.3.8l1.4 1.4c.6.6 1 1.4 1.2 2.2l.2 2.1c.2.8.1 1.6-.2 2.4-.2.5-.4.9-.8 1.3zM12 16c2.2 0 4-1.8 4-4s-1.8-4-4-4-4 1.8-4 4 1.8 4 4 4z"/>
				</svg>
				<div class="absolute top-1/2 -translate-y-1/2 right-full mr-3 w-max flex flex-col items-center gap-3 opacity-0 scale-90 invisible group-hover:opacity-100 group-hover:scale-100 group-hover:visible group-focus-within:opacity-100 group-focus-within:scale-100 group-focus-within:visible transition-all duration-200 ease-in-out">
					<button id="redo-button" title="Redo" class="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center transition-all hover:scale-110">
						<svg class="w-6 h-6 fill-gray-700" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
							<path d="M12.5 8.44c1.85 0 3.55.7 4.8 1.82l-1.6 1.6C14.7 10.7 13.09 10 11.5 10c-3.04 0-5.5 2.46-5.5 5.5s2.46 5.5 5.5 5.5c2.28 0 4.22-1.4 5.04-3.4l1.46.6C17.02 20.3 14.47 22 11.5 22C6.8 22 3 18.2 3 13.5S6.8 5 11.5 5c1.61 0 3.1.48 4.32 1.25L14 4.44V10h5.56l-1.92-1.92C16.05 9.17 14.44 8.44 12.5 8.44z"/>
						</svg>
					</button>
					<button id="undo-button" title="Undo" class="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center transition-all hover:scale-110">
						<svg class="w-6 h-6 fill-gray-700" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
							<path d="M18.4 10.6C16.55 9.17 14.15 8.44 12 8.44c-3.13 0-5.87 1.34-7.8 3.38L2 9.62v6h6l-2.35-2.35C7.05 11.9 9.35 10.44 12 10.44c1.85 0 3.55.7 4.8 1.82L18.4 10.6z"/>
						</svg>
					</button>
					<button id="zoom-out-button" title="Zoom Out" class="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center transition-all hover:scale-110">
						<svg class="w-6 h-6 fill-gray-700" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
							<path d="M19 13H5v-2h14v2z"/>
						</svg>
					</button>
					<button id="zoom-in-button" title="Zoom In" class="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center transition-all hover:scale-110">
						<svg class="w-6 h-6 fill-gray-700" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
							<path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
						</svg>
					</button>
					<label for="tool-pan" title="Pan" class="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center cursor-pointer transition-all hover:scale-110 peer-checked/pan:ring-4 peer-checked/pan:ring-blue-500">
						<svg class="w-6 h-6 fill-gray-700" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
							<path d="M20.5 11H19V7c0-1.1-.9-2-2-2h-4V3.5C13 2.67 12.33 2 11.5 2S10 2.67 10 3.5V5H6c-1.1 0-2 .9-2 2v4H2.5C1.67 9 1 9.67 1 10.5S1.67 12 2.5 12H4v4c0 1.1.9 2 2 2h4v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5V18h4c1.1 0 2-.9 2-2v-4h1.5c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5zM17 16H7V7h10v9z"/>
						</svg>
					</label>
				</div>
			</div>
		</div>

		<div class="absolute bottom-5 left-5 z-10 flex flex-col gap-2">
			<div class="flex flex-row gap-2">
				<div tabindex="0" class="relative group w-[90px] h-[90px] bg-white rounded-tl-[90px] rounded-tr-md rounded-br-md rounded-bl-md shadow-lg p-2 flex items-center justify-center transition-all duration-200 ease-in-out">

					<input type="radio" name="tool" id="tool-draw" value="draw" class="peer/draw sr-only" checked>
					<input type="radio" name="tool" id="tool-erase" value="erase" class="peer/erase sr-only">
					<input type="radio" name="tool" id="tool-fill" value="fill" class="peer/fill sr-only">

					<svg class="w-12 h-12 fill-gray-700 transition-transform group-hover:rotate-45" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
						<path d="M19.4 12.9c.1-1.2-.3-2.5-1.1-3.4l-1.4-1.4c-.4-.4-.8-.7-1.3-.9-1-.4-2.1-.5-3.2-.2l-2.1.5c-1.2.3-2.3 1-3.1 2l-1.4 1.4c-.8.9-1.2 2.1-1.1 3.4.1 1.2.3 2.5 1.1 3.4l1.4 1.4c.4.4.8.7 1.3.9 1 .4 2.1.5 3.2.2l2.1-.5c1.2-.3 2.3-1 3.1-2l1.4-1.4c.8-.9 1.2-2.1 1.1-3.4zm-2.2 2.2l-1.4 1.4c-.6.6-1.4 1-2.2 1.2l-2.1.5c-.8.2-1.6.1-2.4-.2-.5-.2-.9-.4-1.3-.8l-1.4-1.4c-.6-.6-1-1.4-1.2-2.2l-.2-2.1c-.2-.8-.1-1.6.2-2.4.2-.5.4-.9.8-1.3l1.4-1.4c.6-.6 1.4-1 2.2-1.2l2.1-.5c.8-.2 1.6-.1 2.4.2.5.2.9.4 1.3.8l1.4 1.4c.6.6 1 1.4 1.2 2.2l.2 2.1c.2.8.1 1.6-.2 2.4-.2.5-.4.9-.8 1.3zM12 16c2.2 0 4-1.8 4-4s-1.8-4-4-4-4 1.8-4 4 1.8 4 4 4z"/>
					</svg>

					<div class="absolute bottom-full left-1/2 -translate-x-1/2 mb-3 w-max flex flex-col items-center gap-3 opacity-0 scale-90 invisible group-hover:opacity-100 group-hover:scale-100 group-hover:visible group-focus-within:opacity-100 group-focus-within:scale-100 group-focus-within:visible transition-all duration-200 ease-in-out">

						<div class="bg-white rounded-lg shadow-lg p-2 flex flex-col items-center">
							<label for="size-slider" class="text-xs text-gray-600">Size: <span id="size-value" class="font-bold">3px</span></label>
							<input id="size-slider" type="range" min="1" max="200" value="3" class="w-24 h-2 bg-transparent rounded-lg appearance-none cursor-pointer [&::-webkit-slider-runnable-track]:h-2 [&::-webkit-slider-runnable-track]:rounded-full [&::-webkit-slider-runnable-track]:bg-gray-200 [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 [&::-webkit-slider-thumb]:bg-white [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:shadow-md [&::-webkit-slider-thumb]:ring-2 [&::-webkit-slider-thumb]:ring-blue-500 [&::-webkit-slider-thumb]:-mt-1.5 [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:hover:scale-110">
						</div>

						<label for="tool-erase" title="Erase" class="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center cursor-pointer transition-all hover:scale-110 peer-checked/erase:ring-4 peer-checked/erase:ring-blue-500">
							<svg class="w-6 h-6 fill-gray-700" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
								<path d="M19.7 18.3c-.4.4-1 .4-1.4 0L12 12l-6.3 6.3c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4L10.6 12 4.3 5.7c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0L12 10.6l6.3-6.3c.4-.4 1-.4 1.4 0 .4.4.4 1 0 1.4L13.4 12l6.3 6.3c.4.4.4 1 0 1.4z" opacity=".01"/><path d="M21 5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5zM5 19V5h14v14H5z"/><path d="M16.4 14.9l-2.5-2.5-2.5 2.5c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4l2.5-2.5-2.5-2.5c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0l2.5 2.5 2.5-2.5c.4-.4 1-.4 1.4 0 .4.4.4 1 0 1.4L15.1 12l2.5 2.5c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0z" opacity=".01"/><path d="M16.9,8.1L15.5,9.5l-2.5,2.5l-2.5-2.5L9.1,8.1c-0.4-0.4-1-0.4-1.4,0s-0.4,1,0,1.4l1.4,1.4l-2.5,2.5L5.1,14.9c-0.4,0.4-0.4,1,0,1.4s1,0.4,1.4,0l1.4-1.4l2.5-2.5l2.5,2.5l1.4,1.4c0.4,0.4,1,0.4,1.4,0s0.4-1,0-1.4l-1.4-1.4l2.5-2.5l1.4-1.4c0.4-0.4,0.4-1,0-1.4S17.3,7.7,16.9,8.1z"/>
							</svg>
						</label>

						<label for="tool-draw" title="Draw" class="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center cursor-pointer transition-all hover:scale-110 peer-checked/draw:ring-4 peer-checked/draw:ring-blue-500">
							<svg class="w-6 h-6 fill-gray-700" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
								<path d="M14.1 9.4L12 7.3 3 16.3V19h2.7l9.1-9.1-.7-.5zM17.7 3c-.4-.4-1-.4-1.4 0L15 4.3l2.7 2.7 1.3-1.3c.4-.4.4-1 0-1.4L17.7 3zM12 8.7l2.7 2.7-9.1 9.1H3v-2.7L12 8.7zM7.6 17.6L3 12.7V15h2.3l2.3 2.3V19H5v-2.7l-2.7-2.7-1.4-1.4c-.4-.4-.4-1 0-1.4l1.3-1.3c.4-.4 1-.4 1.4 0l1.4 1.4 2.7 2.7H10v-2.3L7.7 7.7 6.4 6.4c-.4-.4-1-.4-1.4 0L3.7 7.7c-.4.4-.4 1 0 1.4l1.4 1.4L7.3 13H5v2.3l2.3 2.3L7.6 17.6z" opacity=".01"/><path d="M21.7 5.7l-2.4-2.4c-.4-.4-1-.4-1.4 0L16.6 4.6l2.7 2.7 1.3-1.3c.4-.4.4-1 0-1.4L21.7 5.7zM3 17.3V21h3.7L17.8 9.9l-3.7-3.7L3 17.3zM14.1 9.4L12 7.3 3 16.3V19h2.7l9.1-9.1-.7-.5z"/>
							</svg>
						</label>

						<label for="tool-fill" title="Fill Background" class="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center cursor-pointer transition-all hover:scale-110 peer-checked/fill:ring-4 peer-checked/fill:ring-blue-500">
							<svg class="w-6 h-6 fill-gray-700" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
								<path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM6 5h2v2H6V5zm0 3h2v2H6V8zm0 3h2v2H6v-2zm0 3h2v2H6v-2zm3 3H6v-2h3v2zm0-3H6v-2h3v2zm0-3H6V8h3v2zm0-3H6V5h3v2zm3 3H9v-2h3v2zm0-3H9V5h3v2zm3 0h-2V5h3v2zm0 3h-2V8h3v2zm0 3h-2v-2h3v2zm0 3h-2v-2h3v2zm3 0h-2v-2h3v2zm0-3h-2v-2h3v2zm0-3h-2V8h3v2zm0-3h-2V5h3v2z" opacity=".01"/><path d="M17.2 6.8C16.7 6.3 16 6 15.2 6H8.8C7.2 6 6 7.2 6 8.8v6.5C6 16.2 6.8 17 7.7 17H8c.2 0 .4-.1.5-.2l1.7-1.7c.2-.2.5-.2.7 0l1.7 1.7c.1.1.3.2.5.2h.3c.9 0 1.7-.8 1.7-1.7V8.8c0-.8-.3-1.5-.8-2z" opacity=".01"/><path d="M19 2H5C3.9 2 3 2.9 3 4v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM5 20V4h14v16H5z"/><path d="M12.2 8.7l-2.6 2.6c-.4.4-.4 1 0 1.4l2.6 2.6c.4.4 1 .4 1.4 0l2.6-2.6c.4-.4.4-1 0-1.4l-2.6-2.6c-.4-.4-1-.4-1.4 0zM17 15c0 .5-.4 1-1 1h-2v2c0 .5-.4 1-1 1s-1-.4-1-1v-2H9v2c0 .5-.4 1-1 1s-1-.4-1-1v-2H5c-.5 0-1-.4-1-1V9c0-.5.4-1 1-1h2V6c0-.5.4-1 1-1s1 .4 1 1v2h2V6c0-.5.4-1 1-1s1 .4 1 1v2h2c.5 0 1 .4 1 1v6z" opacity=".01"/><path d="M21.9 5.3l-2.2-2.2c-.3-.3-.7-.4-1.1-.4H5.4c-.4 0-.8.1-1.1.4L2.1 5.3c-.3.3-.4.7-.4 1.1v11.1c0 .4.1.8.4 1.1l2.2 2.2c.3.3.7.4 1.1.4h11.1c.4 0 .8-.1 1.1-.4l2.2-2.2c.3-.3.4-.7.4-1.1V6.4c0-.4-.1-.8-.4-1.1zM19 17.6L17.6 19H6.4L5 17.6V6.4L6.4 5h11.1L19 6.4v11.2z"/><path d="M17 6H3v11h14V6zm-3.8 8.3l-2.1 2.1c-.2.2-.5.2-.7 0l-2.1-2.1c-.2-.2-.2-.5 0-.7l2.1-2.1c.2-.2.5-.2.7 0l2.1 2.1c.2.2.2.5 0 .7z" opacity=".01"/><path d="M19 4H5c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H5V6h14v12z"/><path d="M12 16.5l-4-4L6.6 11.1c-.4-.4-1-.4-1.4 0s-.4 1 0 1.4l4 4c.4.4 1 .4 1.4 0l4-4c.4-.4.4-1 0-1.4s-1-.4-1.4 0L12 16.5z" opacity=".01"/><path d="M18.3 14.3c.4.4.4 1 0 1.4l-6 6c-.4.4-1 .4-1.4 0l-6-6c-.4-.4-.4-1 0-1.4s1-.4 1.4 0L12 19.6l5.7-5.7c.4-.4 1-.4 1.4 0z" opacity=".01"/><path d="M17.3 14.3l-5 5c-.4.4-1 .4-1.4 0l-5-5c-.4-.4-.4-1 0-1.4s1-.4 1.4 0l4.3 4.3 4.3-4.3c.4-.4 1-.4 1.4 0s.4 1 0 1.4z" opacity=".01"/><path d="M12.9 14.9L12 14l-.9.9c-.4.4-.4 1 0 1.4l.9.9.9-.9c.4-.4.4 1 0 1.4l-.9.9c-.4.4-1 .4-1.4 0l-2.2-2.2c-.4-.4-.4-1 0-1.4l2.2-2.2c.4-.4 1-.4 1.4 0l2.2 2.2c.4.4.4 1 0 1.4l-2.2 2.2c-.4.4-1 .4-1.4 0l-.9-.9-.9.9c-.4.4-1 .4-1.4 0l-2.2-2.2c-.4-.4-.4-1 0-1.4l2.2-2.2c.4-.4 1-.4 1.4 0l2.2 2.2c.4.4.4 1 0 1.4z"/>
							</svg>
						</label>
					</div>
				</div>

				<div class="w-[90px] h-[90px] bg-white rounded-tl-md rounded-tr-[90px] rounded-br-md rounded-bl-md shadow-lg p-2 flex flex-col items-center justify-center gap-1 transition-all duration-200 ease-in-out">
					<input type="color" id="color-picker" value="#000000" title="Select color" class="w-10 h-10 shadow-md rounded-md cursor-pointer border-none bg-transparent appearance-none [&::-webkit-color-swatch-wrapper]:p-0 [&::-webkit-color-swatch]:rounded-md [&::-webkit-color-swatch]:border-none">
				</div>
			</div>

			<div class="flex flex-row gap-2">
				<button id="reset-button" title="Reset Canvas" class="group w-[90px] h-[90px] bg-white rounded-tl-md rounded-tr-md rounded-br-md rounded-bl-[90px] shadow-lg flex items-center justify-center transition-all duration-200 ease-in-out hover:scale-110 hover:bg-red-600">
					<svg class="w-10 h-10 fill-red-600 group-hover:fill-white transition-colors" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
						<path d="M12 4c-4.41 0-8 3.59-8 8s3.59 8 8 8 8-3.59 8-8-3.59-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zm-1-8H9v2h2v2h2v-2h2V9h-2V7h-2v3z" opacity=".01"/><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>
					</svg>
				</button>
				<button id="share-button" title="Share Room Link" class="group w-[90px] h-[90px] bg-white rounded-tl-md rounded-tr-md rounded-br-[90px] rounded-bl-md shadow-lg flex items-center justify-center transition-all duration-200 ease-in-out hover:scale-110 hover:bg-green-600">
					<svg class="w-10 h-10 fill-green-600 group-hover:fill-white transition-colors" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
						<path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 8.81C7.5 8.31 6.79 8 6 8c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3s3-1.34 3-3-1.34-3-3-3z"/>
					</svg>
				</button>
			</div>
		</div>

		<div id="toast-notification" class="absolute bottom-5 left-1/2 -translate-x-1/2 bg-green-500 text-white py-2 px-4 rounded-lg opacity-0 transition-opacity duration-300 z-20">
			Room link copied to clipboard!
		</div>

		<canvas id="drawCanvas" class="block bg-transparent cursor-crosshair"></canvas>

		<script>
			document.addEventListener("DOMContentLoaded", () => {
				const canvas = document.getElementById("drawCanvas");
				const ctx = canvas.getContext("2d");

				let isDrawing = false;
				let isMousePanning = false;
				let isTouchPanning = false;
				let lastX = 0;
				let lastY = 0;

				let drawHistory = [];
				let redoHistory = [];
				let currentStrokeId = 0;
				let myClientID = "";

				let backgroundColor = '#FFFFFF';

				let transform = {
					panX: 0,
					panY: 0,
					scale: 1,
				};

				let mousePanStart = { x: 0, y: 0 };
				let touchPanStart = { x: 0, y: 0 };
				let lastPinchDist = 0;

				let currentTool = 'draw';
				let currentColor = '#000000';
				let currentWidth = 3;

				const roomID = {{ roomID }};
				const proto = window.location.protocol === "https:" ? "wss:" : "ws:";
				const wsURL = `${proto}//${window.location.host}/ws/${roomID}`;
				const ws = new WebSocket(wsURL);

				ws.onopen = () => console.log(`WebSocket connection established for room: ${roomID}`);
				ws.onclose = () => console.log("WebSocket connection closed");
				ws.onerror = (err) => console.error("WebSocket error: ", err);

				ws.onmessage = (event) => {
					try {
						const data = JSON.parse(event.data);

						if (data.type === 'welcome') {
							myClientID = data.clientID;
							console.log('My client ID:', myClientID);
						} else if (data.type === 'history') {
							console.log('Received history:', data.lines.length, 'lines');
							drawHistory = data.lines;
							redoHistory = [];
							redrawCanvas();
						} else if (data.type === 'draw') {
							processDraw(data, false);
						} else if (data.type === 'fill') {
							processFill(data, false);
						} else if (data.type === 'reset') {
							console.log('Received reset message');
							drawHistory = [];
							redoHistory = [];
							backgroundColor = '#FFFFFF';
							redrawCanvas();
						}

					} catch (err) {
						console.error("Failed to parse message or draw:", err);
					}
				};

				function setCanvasSize() {
					canvas.width = window.innerWidth;
					canvas.height = window.innerHeight;
					ctx.lineCap = "round";
					ctx.lineJoin = "round";
					redrawCanvas();
				}

				setCanvasSize();
				window.addEventListener("resize", setCanvasSize);
				window.addEventListener("orientationchange", setCanvasSize);

				function redrawCanvas() {
					ctx.save();
					ctx.setTransform(1, 0, 0, 1, 0, 0);
					ctx.clearRect(0, 0, canvas.width, canvas.height);

					let currentBg = '#FFFFFF';
					const linesByStyle = new Map();

					for (const item of drawHistory) {
						if (item.type === 'fill') {
							currentBg = item.color;
						} else {
							const styleKey = `${item.color || "#000000"}:${item.width || 3}`;
							if (!linesByStyle.has(styleKey)) {
								linesByStyle.set(styleKey, []);
							}
							linesByStyle.get(styleKey).push(item);
						}
					}

					backgroundColor = currentBg;

					ctx.fillStyle = backgroundColor;
					ctx.fillRect(0, 0, canvas.width, canvas.height);

					ctx.translate(transform.panX, transform.panY);
					ctx.scale(transform.scale, transform.scale);

					for (const [styleKey, lines] of linesByStyle.entries()) {
						const [color, width] = styleKey.split(':');

						ctx.strokeStyle = color;
						ctx.lineWidth = parseFloat(width);

						ctx.beginPath();
						for (const line of lines) {
							ctx.moveTo(line.x0, line.y0);
							ctx.lineTo(line.x1, line.y1);
						}
						ctx.stroke();
					}

					ctx.restore();
				}

				function processDraw(lineData, isLocal) {
					drawHistory.push(lineData);
					redrawCanvas();
					if (isLocal && ws.readyState === WebSocket.OPEN) {
						ws.send(JSON.stringify(lineData));
					}
				}

				function processFill(fillData, isLocal) {
					drawHistory.push(fillData);
					backgroundColor = fillData.color;
					redrawCanvas();
					if (isLocal && ws.readyState === WebSocket.OPEN) {
						ws.send(JSON.stringify(fillData));
					}
				}

				function getEventCoords(e) {
					const rect = canvas.getBoundingClientRect();
					if (e.touches && e.touches.length > 0) {
						return [e.touches[0].clientX - rect.left, e.touches[0].clientY - rect.top];
					}
					return [e.offsetX, e.offsetY];
				}

				function elementToCanvasCoords(x, y) {
					const canvasX = (x - transform.panX) / transform.scale;
					const canvasY = (y - transform.panY) / transform.scale;
					return [canvasX, canvasY];
				}

				function getCanvasCoords(e) {
					const [elementX, elementY] = getEventCoords(e);
					return elementToCanvasCoords(elementX, elementY);
				}

				function getTouchMidpoint(e) {
					const rect = canvas.getBoundingClientRect();
					if (e.touches.length === 1) {
						return { x: e.touches[0].clientX - rect.left, y: e.touches[0].clientY - rect.top };
					} else if (e.touches.length === 2) {
						const [t1, t2] = [e.touches[0], e.touches[1]];
						return { x: ((t1.clientX + t2.clientX) / 2) - rect.left, y: ((t1.clientY + t2.clientY) / 2) - rect.top };
					}
					return { x: 0, y: 0 };
				}

				function getPinchDist(e) {
					const [t1, t2] = [e.touches[0], e.touches[1]];
					const dx = t1.clientX - t2.clientX;
					const dy = t1.clientY - t2.clientY;
					return Math.sqrt(dx * dx + dy * dy);
				}

				function zoomAtPoint(scaleDelta, pointX, pointY) {
					const [worldX, worldY] = elementToCanvasCoords(pointX, pointY);
					const newScale = Math.max(0.1, Math.min(transform.scale * scaleDelta, 20));
					transform.panX += (worldX * transform.scale - worldX * newScale) + (pointX - transform.panX) * (1 - scaleDelta);
					transform.panY += (worldY * transform.scale - worldY * newScale) + (pointY - transform.panY) * (1 - scaleDelta);
					transform.scale = newScale;
					redrawCanvas();
				}

				function undoLast() {
					if (drawHistory.length === 0 || !myClientID) return;

					let lastMyStrokeId = 0;
					let lastMyItemType = '';

					for (let i = drawHistory.length - 1; i >= 0; i--) {
						if (drawHistory[i].clientID === myClientID) {
							lastMyStrokeId = drawHistory[i].strokeId;
							lastMyItemType = drawHistory[i].type;
							break;
						}
					}

					if (lastMyStrokeId === 0) return;

					const strokeToUndo = [];
					const newDrawHistory = [];

					for (const item of drawHistory) {
						if (item.strokeId === lastMyStrokeId) {
							strokeToUndo.push(item);
						} else {
							newDrawHistory.push(item);
						}
					}

					drawHistory = newDrawHistory;
					redoHistory.push(strokeToUndo);

					redrawCanvas();
				}

				function redoLast() {
					if (redoHistory.length === 0 || !myClientID) return;

					const strokeToRedo = redoHistory.pop();
					if (!strokeToRedo || strokeToRedo.length === 0) return;

					if (strokeToRedo[0].clientID !== myClientID) {
						console.error("Redo history corrupted.");
						return;
					}

					for (const item of strokeToRedo) {
						drawHistory.push(item);
					}

					redrawCanvas();
				}


				function startMouseDrawing(e) {
					const toolbars = document.querySelectorAll('.relative.group');
					toolbars.forEach(toolbar => {
						toolbar.blur();
					});

					if (e.button !== 0) return;

					if (currentTool === 'fill') {
						const strokeId = Date.now();
						const fillData = {
							type: 'fill',
							color: currentColor,
							strokeId: strokeId,
							clientID: myClientID
						};
						redoHistory = [];
						processFill(fillData, true);
						return;
					}

					if (currentTool === 'pan') {
						isMousePanning = true;
						mousePanStart = { x: e.clientX, y: e.clientY };
						canvas.classList.add('cursor-grabbing');
					} else {
						isDrawing = true;
						[lastX, lastY] = getCanvasCoords(e);
						currentStrokeId = Date.now();
						redoHistory = [];
					}
				}

				function moveMouseDrawing(e) {
					if (isMousePanning && currentTool === 'pan') {
						const deltaX = e.clientX - mousePanStart.x;
						const deltaY = e.clientY - mousePanStart.y;
						transform.panX += deltaX;
						transform.panY += deltaY;
						mousePanStart = { x: e.clientX, y: e.clientY };
						redrawCanvas();
					} else if (isDrawing && (currentTool === 'draw' || currentTool === 'erase')) {
						const [newX, newY] = getCanvasCoords(e);
						const color = (currentTool === 'erase') ? backgroundColor : currentColor;
						const lineData = {
							type: 'draw',
							x0: lastX, y0: lastY, x1: newX, y1: newY,
							color: color, width: currentWidth,
							strokeId: currentStrokeId, clientID: myClientID
						};
						processDraw(lineData, true);
						[lastX, lastY] = [newX, newY];
					}
				}

				function stopMouseDrawing() {
					isDrawing = false;
					isMousePanning = false;
				}

				function handleTouchStart(e) {
					const toolbars = document.querySelectorAll('.relative.group');
					toolbars.forEach(toolbar => {
						toolbar.blur();
					});

					if (e.touches.length === 1) {

						if (currentTool === 'fill') {
							const strokeId = Date.now();
							const fillData = {
								type: 'fill',
								color: currentColor,
								strokeId: strokeId,
								clientID: myClientID
							};
							redoHistory = [];
							processFill(fillData, true);
							return;
						}

						if (currentTool === 'pan') {
							isDrawing = false;
							isTouchPanning = true;
							touchPanStart = getTouchMidpoint(e);
						} else {
							isDrawing = true;
							isTouchPanning = false;
							[lastX, lastY] = getCanvasCoords(e);
							currentStrokeId = Date.now();
							redoHistory = [];
						}
					} else if (e.touches.length === 2) {
						isDrawing = false;
						isTouchPanning = false;
						lastPinchDist = getPinchDist(e);
					}
				}

				function handleTouchMove(e) {
					if (isDrawing && e.touches.length === 1 && (currentTool === 'draw' || currentTool === 'erase')) {
						const [newX, newY] = getCanvasCoords(e);
						const color = (currentTool === 'erase') ? backgroundColor : currentColor;
						const lineData = {
							type: 'draw',
							x0: lastX, y0: lastY, x1: newX, y1: newY,
							color: color, width: currentWidth,
							strokeId: currentStrokeId, clientID: myClientID
						};
						processDraw(lineData, true);
						[lastX, lastY] = [newX, newY];
					} else if (isTouchPanning && e.touches.length === 1 && currentTool === 'pan') {
						const panNow = getTouchMidpoint(e);
						const deltaX = panNow.x - touchPanStart.x;
						const deltaY = panNow.y - touchPanStart.y;
						transform.panX += deltaX;
						transform.panY += deltaY;
						touchPanStart = panNow;
						redrawCanvas();
					} else if (e.touches.length === 2) {
						const newDist = getPinchDist(e);
						const zoomDelta = newDist / lastPinchDist;
						const midPoint = getTouchMidpoint(e);
						zoomAtPoint(zoomDelta, midPoint.x, midPoint.y);
						lastPinchDist = newDist;
					}
				}

				function handleTouchEnd(e) {
					isDrawing = false;
					isTouchPanning = false;
					lastPinchDist = 0;
				}

				canvas.addEventListener("mousedown", startMouseDrawing);
				canvas.addEventListener("mousemove", moveMouseDrawing);
				canvas.addEventListener("mouseup", stopMouseDrawing);
				canvas.addEventListener("mouseout", stopMouseDrawing);
				canvas.addEventListener("touchstart", handleTouchStart, { passive: false });
				canvas.addEventListener("touchmove", handleTouchMove, { passive: false });
				canvas.addEventListener("touchend", handleTouchEnd);
				canvas.addEventListener("touchcancel", handleTouchEnd);
				canvas.addEventListener('wheel', (e) => {
					e.preventDefault();
					const scaleDelta = e.deltaY > 0 ? 0.9 : 1.1;
					zoomAtPoint(scaleDelta, e.offsetX, e.offsetY);
				}, { passive: false });


				const toolDraw = document.getElementById('tool-draw');
				const toolErase = document.getElementById('tool-erase');
				const toolPan = document.getElementById('tool-pan');
				const toolFill = document.getElementById('tool-fill');
				const colorPicker = document.getElementById('color-picker');
				const resetButton = document.getElementById('reset-button');
				const shareButton = document.getElementById('share-button');
				const toast = document.getElementById('toast-notification');
				const sizeSlider = document.getElementById('size-slider');
				const sizeValueDisplay = document.getElementById('size-value');

				currentWidth = sizeSlider.value;
				sizeValueDisplay.textContent = `${currentWidth}px`;

				const zoomInButton = document.getElementById('zoom-in-button');
				const zoomOutButton = document.getElementById('zoom-out-button');
				const undoButton = document.getElementById('undo-button');
				const redoButton = document.getElementById('redo-button');

				function setTool(tool) {
					currentTool = tool;
					if (tool === 'pan') {
						canvas.classList.remove('cursor-crosshair');
						canvas.classList.add('cursor-grab');
					} else if (tool === 'fill') {
						canvas.classList.remove('cursor-grab');
						canvas.classList.add('cursor-copy');
					} else {
						canvas.classList.remove('cursor-grab');
						canvas.classList.add('cursor-crosshair');
					}
				}

				toolDraw.addEventListener('change', () => setTool('draw'));
				toolErase.addEventListener('change', () => setTool('erase'));
				toolPan.addEventListener('change', () => setTool('pan'));
				toolFill.addEventListener('change', () => setTool('fill'));

				colorPicker.addEventListener('input', (e) => {
					currentColor = e.target.value;
					if (currentTool === 'pan') {
						toolDraw.checked = true;
						setTool('draw');
					}
				});

				sizeSlider.addEventListener('input', (e) => {
					currentWidth = e.target.value;
					sizeValueDisplay.textContent = `${currentWidth}px`;
				});

				zoomInButton.addEventListener('click', () => zoomAtPoint(1.2, canvas.width / 2, canvas.height / 2));
				zoomOutButton.addEventListener('click', () => zoomAtPoint(0.8, canvas.width / 2, canvas.height / 2));

				undoButton.addEventListener('click', undoLast);
				redoButton.addEventListener('click', redoLast);

				resetButton.addEventListener('click', () => {
					if (ws.readyState === WebSocket.OPEN) {
						ws.send(JSON.stringify({ type: 'reset' }));
					}
				});

				shareButton.addEventListener('click', () => {
					navigator.clipboard.writeText(window.location.href).then(() => {
						toast.innerText = "Room link copied!";
						toast.classList.remove('opacity-0');
						setTimeout(() => toast.classList.add('opacity-0'), 2000);
					}).catch(err => {
						console.error('Failed to copy link: ', err);
						toast.innerText = "Failed to copy link.";
						toast.classList.add('bg-red-500');
						toast.classList.remove('opacity-0', 'bg-green-500');
						setTimeout(() => {
							toast.classList.add('opacity-0');
							toast.classList.remove('bg-red-500');
							toast.classList.add('bg-green-500');
						}, 2000);
					});
				});
			});
		</script>
	}
}
